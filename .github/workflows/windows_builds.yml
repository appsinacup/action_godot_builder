name: 🏁 Windows Builds
on:
  workflow_call:
    secrets:
      ENCRYPTION_KEY:
        description: Encryption key for the build
    inputs:
      base-branch:
        description: 'Base branch to use for the builds'
        type: string
      lto:
        description: 'LTO mode. Options: "none", "full"'
        type: string
      repo:
        description: 'Repository to use for the build'
        type: string
      tag:
        description: 'tag to use for the build'
        type: string
      module_flags:
        description: 'Extra module flags, e.g. module_webm_enabled=no'
        type: string
      template_module_flags:
        description: 'Extra module flags for template build, e.g. module_webm_enabled=no'
        type: string
      use_encryption_key:
        description: 'Whether to use the encryption key for the build (if available)'
        type: boolean

# Global Settings
# SCONS_CACHE for windows must be set in the build environment
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: ${{ inputs.base-branch }}
  SCONSFLAGS: verbose=yes warnings=extra d3d12=yes strict_checks=yes "angle_libs=${{ github.workspace }}/" "mesa_libs=${{ github.workspace }}/" debug_symbols=no ${{ inputs.module_flags }} use_static_cpp=yes
  SCONS_CACHE_MSVC_CONFIG: true

jobs:
  build-windows:
    # Windows 10 with latest image
    runs-on: windows-latest
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Editor (target=editor, arch=x86_64)
            target: editor
            scons-flags: arch=x86_64

          - name: Editor (target=editor, arch=arm64)
            target: editor
            scons-flags: arch=arm64

          - name: Template (target=template_release, arch=x86_64)
            target: template_release
            scons-flags: arch=x86_64
          
          - name: Template (target=template_release, arch=x86)
            target: template_release
            scons-flags: arch=x86
          
          - name: Template (target=template_release, arch=arm64)
            target: template_release
            scons-flags: arch=arm64
          
          - name: Template (target=template_debug, arch=x86_64)
            target: template_debug
            scons-flags: arch=x86_64
          
          - name: Template (target=template_debug, arch=x86)
            target: template_debug
            scons-flags: arch=x86
          
          - name: Template (target=template_debug, arch=arm64)
            target: template_debug
            scons-flags: arch=arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.tag }}
          submodules: recursive

      - name: Export Encryption Key
        if: ${{ env.use_encryption_key == 'true' }}
        run: echo "SCRIPT_AES256_ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> $GITHUB_ENV

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: windows-${{ matrix.target }}-${{ matrix.scons-flags }}-${{ inputs.lto }}
        continue-on-error: true

      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Download Direct3D 12 SDK components
        run: python ./misc/scripts/install_d3d12_sdk_windows.py

# Angle

      - name: Download pre-built ANGLE static libraries for x86_64
        if: matrix.scons-flags == 'arch=x86_64'
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: godotengine/godot-angle-static
          version: tags/chromium/6601.2
          file: godot-angle-static-x86_64-msvc-release.zip
          target: angle/angle.zip
      
      - name: Download pre-built ANGLE static libraries for x86_32
        if: matrix.scons-flags == 'arch=x86'
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: godotengine/godot-angle-static
          version: tags/chromium/6601.2
          file: godot-angle-static-x86_32-msvc-release.zip
          target: angle/angle.zip
      
      - name: Download pre-built ANGLE static libraries for arm64
        if: matrix.scons-flags == 'arch=arm64'
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: godotengine/godot-angle-static
          version: tags/chromium/6601.2
          file: godot-angle-static-arm64-msvc-release.zip
          target: angle/angle.zip

      - name: Extract pre-built ANGLE static libraries
        run: Expand-Archive -Force angle/angle.zip ${{ github.workspace }}/

# NIR

      - name: Download pre-built NIR
        if: matrix.scons-flags == 'arch=x86_64'
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: godotengine/godot-nir-static
          version: tags/23.1.9-1
          file: godot-nir-static-x86_64-msvc-release.zip
          target: nir/nir.zip

      - name: Download pre-built NIR for x86_32
        if: matrix.scons-flags == 'arch=x86'
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: godotengine/godot-nir-static
          version: tags/23.1.9-1
          file: godot-nir-static-x86_32-msvc-release.zip
          target: nir/nir.zip
      
      - name: Download pre-built NIR for arm64
        if: matrix.scons-flags == 'arch=arm64'
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: godotengine/godot-nir-static
          version: tags/23.1.9-1
          file: godot-nir-static-arm64-msvc-release.zip
          target: nir/nir.zip
      
      - name: Extract pre-built NIR
        run: Expand-Archive -Force nir/nir.zip ${{ github.workspace }}/

      - name: Compilation (editor)
        if: matrix.target == 'editor'
        uses: ./.github/actions/godot-build
        with:
          scons-flags: ${{ env.SCONSFLAGS }} ${{ matrix.scons-flags }} ${{ inputs.lto }} ${{ inputs.module_flags }}
          platform: windows
          target: ${{ matrix.target }}

      - name: Compilation (template)
        if: matrix.target != 'editor'
        uses: ./.github/actions/godot-build
        with:
          scons-flags: ${{ env.SCONSFLAGS }} ${{ matrix.scons-flags }} ${{ inputs.lto }} ${{ inputs.template_module_flags }}
          platform: windows
          target: ${{ matrix.target }}

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: windows-${{ matrix.target }}-${{ matrix.scons-flags }}-${{ inputs.lto }}
        continue-on-error: true

      - name: Prepare artifact
        run: |
          Remove-Item bin/* -Include *.exp,*.lib,*.pdb -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}-${{ matrix.scons-flags }}-${{ inputs.lto }}
          path: bin
