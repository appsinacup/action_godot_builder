name: ðŸš€ Create Release
on:
  workflow_call:
    inputs:
      lto:
        description: 'LTO mode. Options: "none", "thin", "full"'
        required: false
        type: string
        default: "lto=thin"
      repo:
        description: 'Repository to use for the build'
        default: 'godotengine/godot'
        type: string
      tag:
        description: 'tag to use for the build'
        required: true
        type: string
        default: '4.4.1-stable'
      encryption_key:
        description: Encryption key for the build
        required: false
        type: string
        default: '7f5ddb606888db9a20dbf00b76f9b426f81e48d299c7093d5119b39967bae8f1'
      build_profile:
        description: 'Build profile file path.'
        required: false
        type: string
        default: ''
      module_flags:
        description: 'Extra module flags, e.g. module_webm_enabled=no'
        required: false
        type: string
        default: ''

# Global Settings
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: 4.4
  SCONSFLAGS: verbose=yes warnings=extra werror=yes strict_checks=yes debug_symbols=no ${{ inputs.module_flags }} build_profile=${{ inputs.build_profile }}
  SCRIPT_AES256_ENCRYPTION_KEY: ${{ inputs.encryption_key }}

jobs:
  release:
    name: ðŸš€ Create Release
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.tag }}
          submodules: recursive

      - uses: actions/download-artifact@v4
        with:
          path: bin
          merge-multiple: true

      - name: List downloaded bin
        run: ls -R bin
      
      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Select Xcode 16
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      - name: Checkout script repo for install_vulkan_sdk_macos.sh
        uses: actions/checkout@v4
        with:
          repository: appsinacup/action_godot_builder
          path: misc/scripts

      - name: Setup Vulkan SDK
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh

      - name: Mac Create Editor Bundle
        run: |
          cp -r misc/dist/macos_tools.app ./bin/Godot.app
          mkdir -p bin/Godot.app/Contents/MacOS
          cp bin/godot.macos.editor.universal bin/Godot.app/Contents/MacOS/Godot
          chmod +x bin/Godot.app/Contents/MacOS/Godot
          codesign --force --timestamp --options=runtime --entitlements misc/dist/macos/editor.entitlements -s - bin/Godot.app

      - name: Mac Create Template Bundle
        run: |

          cp -r misc/dist/macos_template.app ./bin
          mkdir -p bin/macos_template.app/Contents/MacOS
          cp bin/godot.macos.template_release.universal bin/macos_template.app/Contents/MacOS/godot_macos_release.universal
          cp bin/godot.macos.template_debug.universal bin/macos_template.app/Contents/MacOS/godot_macos_debug.universal
          chmod +x bin/macos_template.app/Contents/MacOS/godot_macos*
          zip -q -9 -r bin/macos.zip bin/macos_template.app
      
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Download pre-built Android Swappy Frame Pacing Library
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: godotengine/godot-swappy
          version: tags/from-source-2025-01-31
          file: godot-swappy.7z
          target: swappy/godot-swappy.7z

      - name: Extract pre-built Android Swappy Frame Pacing Library
        run: 7za x -y swappy/godot-swappy.7z -o${{github.workspace}}/thirdparty/swappy-frame-pacing

      - name: Android Generate Godot templates
        run: |
          cd platform/android/java
          ./gradlew generateGodotTemplates
          cd ../../..
          ls -l bin/

      - name: Package per-platform editors and templates
        run: |
          set -e
          VERSION=${{ inputs.tag }}
          VERSION_CLEAN=${VERSION//-/.}
          mkdir -p release/templates/$VERSION_CLEAN
          
          # Editors. Rename them
          mv bin/godot.linuxbsd.editor.x86_64.llvm bin/Godot_v${VERSION}_linux.x86_64
          mv bin/godot.windows.editor.x86_64.exe bin/Godot_v${VERSION}_win64.exe
          mv bin/godot.windows.editor.x86_32.exe bin/Godot_v${VERSION}_win32.exe
          mv bin/godot.windows.editor.arm64.exe bin/Godot_v${VERSION}_windows_arm64.exe

          # Archive them
          cd bin
          zip -q -9 -r ../release/Godot_v${VERSION}_linux.x86_64.zip Godot_v${VERSION}_linux.x86_64
          zip -q -9 -r ../release/Godot_v${VERSION}_win64.exe.zip Godot_v${VERSION}_win64.exe
          zip -q -9 -r ../release/Godot_v${VERSION}_win32.exe.zip Godot_v${VERSION}_win32.exe
          zip -q -9 -r ../release/Godot_v${VERSION}_windows_arm64.exe.zip Godot_v${VERSION}_windows_arm64.exe
          zip -q -9 -r ../release/Godot_v${VERSION}_macos.universal.zip Godot.app
          cd ..
          # Templates
          cp bin/godot.linuxbsd.template_debug.x86_64.llvm "release/templates/linux_debug.x86_64"
          cp bin/godot.linuxbsd.template_release.x86_64.llvm "release/templates/linux_release.x86_64"

          cp bin/godot.windows.template_debug.x86_64.exe "release/templates/windows_debug_x86_64.exe"
          cp bin/godot.windows.template_release.x86_64.exe "release/templates/windows_release_x86_64.exe"
          cp bin/godot.windows.template_debug.x86_32.exe "release/templates/windows_debug_x86_32.exe"
          cp bin/godot.windows.template_release.x86_32.exe "release/templates/windows_release_x86_32.exe"
          cp bin/godot.windows.template_debug.arm64.exe "release/templates/windows_debug_arm64.exe"
          cp bin/godot.windows.template_release.arm64.exe "release/templates/windows_release_arm64.exe"

          cp bin/macos.zip "release/templates/macos.zip"
          cp bin/godot_ios.zip "release/templates/ios.zip"

          cp -f bin/android_source.zip "release/templates/"

          cp bin/godot.web.template_release.wasm32.zip "release/templates/web_release.zip"
          cp bin/godot.web.template_debug.wasm32.zip "release/templates/web_debug.zip"
          cp bin/godot.web.template_release.wasm32.nothreads.zip "release/templates/web_nothreads_release.zip"
          cp bin/godot.web.template_debug.wasm32.nothreads.zip "release/templates/web_nothreads_debug.zip"
          cp bin/godot.web.template_release.wasm32.dlink.zip "release/templates/web_dlink_release.zip"
          cp bin/godot.web.template_debug.wasm32.dlink.zip "release/templates/web_dlink_debug.zip"
          cp bin/godot.web.template_release.wasm32.nothreads.dlink.zip "release/templates/web_nothreads_dlink_release.zip"
          cp bin/godot.web.template_debug.wasm32.nothreads.dlink.zip "release/templates/web_nothreads_dlink_debug.zip"

          echo "${VERSION_CLEAN}" > release/templates/version.txt

          # Create export templates .tpz
          cd release
          zip -r Godot_v${VERSION}_export_templates.tpz templates
      
      - name: List release directory
        run: ls -R release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Custom Godot ${{ inputs.tag }}"
          draft: true
          files: |
            release/Godot_v${{ inputs.tag }}_linux.x86_64.zip
            release/Godot_v${{ inputs.tag }}_win64.exe.zip
            release/Godot_v${{ inputs.tag }}_win32.exe.zip
            release/Godot_v${{ inputs.tag }}_windows_arm64.exe.zip
            release/Godot_v${{ inputs.tag }}_macos.universal.zip
            release/Godot_v${{ inputs.tag }}_export_templates.tpz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
