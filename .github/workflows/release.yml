name: ðŸš€ Create Release
on:
  workflow_call:
    inputs:
      base-branch:
        description: 'Base branch to use for the builds'
        type: string
      lto:
        description: 'LTO mode. Options: "none", "thin", "full"'
        type: string
      repo:
        description: 'Repository to use for the build'
        type: string
      tag:
        description: 'tag to use for the build'
        type: string
      tag_release:
        description: 'tag to use for releasing the build'
        type: string
      module_flags:
        description: 'Extra module flags, e.g. module_webm_enabled=no'
        type: string
      template_module_flags:
        description: 'Extra module flags for template build, e.g. module_webm_enabled=no'
        type: string

# Global Settings
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: ${{ inputs.base-branch }}
  SCONSFLAGS: verbose=yes warnings=extra werror=yes strict_checks=yes debug_symbols=no ${{ inputs.module_flags }}

jobs:
  release:
    env:
      BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    name: ðŸš€ Create Release
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.tag }}
          submodules: recursive

      - uses: actions/download-artifact@v4
        with:
          path: bin
          merge-multiple: true

      - name: List downloaded bin
        run: ls -R bin
      
      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Select Xcode 16
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      - name: Checkout script repo for install_vulkan_sdk_macos.sh
        uses: actions/checkout@v4
        with:
          repository: appsinacup/action_godot_builder
          path: misc/scripts

      - name: Setup Vulkan SDK
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate
        if: ${{ env.BUILD_CERTIFICATE_BASE64 != '' }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          SIGNING_IDENTITY=$(security find-identity -v -p codesigning | awk -F'"' 'NR==1 {print $2}')
          echo "APPLE_SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV
  
      - name: Mac Create Editor Bundle
        if: ${{ env.BUILD_CERTIFICATE_BASE64 != '' }}
        run: |
          cp -r misc/dist/macos_tools.app ./bin/Godot.app
          mkdir -p bin/Godot.app/Contents/MacOS
          cp bin/godot.macos.editor.universal bin/Godot.app/Contents/MacOS/Godot
          chmod +x bin/Godot.app/Contents/MacOS/Godot
          codesign --force --timestamp --options=runtime --entitlements misc/dist/macos/editor.entitlements --sign "${{ env.APPLE_SIGNING_IDENTITY }}" bin/Godot.app

          # Package the application into a zip file
          zip -q -9 -r "Godot.universal.zip" bin/Godot.app

          /Applications/Xcode.app/Contents/Developer/usr/bin/notarytool store-credentials "AppleID" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APP_SPECIFIC_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}"

          /Applications/Xcode.app/Contents/Developer/usr/bin/notarytool submit Godot.universal.zip --wait --keychain-profile "AppleID"

          xcrun stapler staple bin/Godot.app

      - name: Mac Create Mono Editor Bundle
        if: ${{ env.BUILD_CERTIFICATE_BASE64 != '' }}
        run: |
          cp -r misc/dist/macos_tools.app ./bin/Godot_mono.app
          cp -r bin/GodotSharp bin/Godot_mono.app/Contents/Resources
          mkdir -p bin/Godot_mono.app/Contents/MacOS
          cp bin/godot.macos.editor.mono.universal bin/Godot_mono.app/Contents/MacOS/Godot
          chmod +x bin/Godot_mono.app/Contents/MacOS/Godot
          codesign --force --timestamp --options=runtime --entitlements misc/dist/macos/editor.entitlements --sign "${{ env.APPLE_SIGNING_IDENTITY }}" bin/Godot_mono.app

          zip -q -9 -r "Godot_mono.universal.zip" bin/Godot_mono.app

          /Applications/Xcode.app/Contents/Developer/usr/bin/notarytool submit Godot_mono.universal.zip --wait --keychain-profile "AppleID"

          xcrun stapler staple bin/Godot_mono.app

      - name: Mac Create Editor Bundle (w/o Signing)
        if: ${{ env.BUILD_CERTIFICATE_BASE64 == '' }}
        run: |
          cp -r misc/dist/macos_tools.app ./bin/Godot.app
          mkdir -p bin/Godot.app/Contents/MacOS
          cp bin/godot.macos.editor.universal bin/Godot.app/Contents/MacOS/Godot
          chmod +x bin/Godot.app/Contents/MacOS/Godot
          codesign --force --timestamp --options=runtime --entitlements misc/dist/macos/editor.entitlements -s - bin/Godot.app

      - name: Mac Create Mono Editor Bundle (w/o Signing)
        if: ${{ env.BUILD_CERTIFICATE_BASE64 == '' }}
        run: |
          set -e
          if [ ! -f bin/godot.macos.editor.mono.universal ]; then
            echo "Mono macOS editor binary not found, skipping."
            exit 0
          fi
          cp -r misc/dist/macos_tools.app ./bin/Godot_mono.app
          mkdir -p bin/Godot_mono.app/Contents/MacOS
          cp bin/godot.macos.editor.mono.universal bin/Godot_mono.app/Contents/MacOS/Godot
          chmod +x bin/Godot_mono.app/Contents/MacOS/Godot
          codesign --force --timestamp --options=runtime --entitlements misc/dist/macos/editor.entitlements -s - bin/Godot_mono.app

      - name: Mac Create Template Bundle
        run: |
          cp -r misc/dist/macos_template.app ./bin
          mkdir -p bin/macos_template.app/Contents/MacOS
          cp bin/godot.macos.template_release.universal bin/macos_template.app/Contents/MacOS/godot_macos_release.universal
          cp bin/godot.macos.template_debug.universal bin/macos_template.app/Contents/MacOS/godot_macos_debug.universal
          chmod +x bin/macos_template.app/Contents/MacOS/godot_macos*
          cd bin && zip -q -9 -r macos.zip macos_template.app && cd ..

      - name: Mac Create Template Bundle (Mono)
        run: |
          set -e
          if [ ! -f bin/godot.macos.template_release.mono.universal ] || [ ! -f bin/godot.macos.template_debug.mono.universal ]; then
            echo "Mono macOS template binaries not found, skipping."
            exit 0
          fi
          cp -r misc/dist/macos_template.app ./bin/macos_template_mono.app
          mkdir -p bin/macos_template_mono.app/Contents/MacOS
          cp bin/godot.macos.template_release.mono.universal bin/macos_template_mono.app/Contents/MacOS/godot_macos_release.universal
          cp bin/godot.macos.template_debug.mono.universal bin/macos_template_mono.app/Contents/MacOS/godot_macos_debug.universal
          chmod +x bin/macos_template_mono.app/Contents/MacOS/godot_macos*
          cd bin && zip -q -9 -r macos_mono.zip macos_template_mono.app && cd ..

      - name: Assemble Android sources (debug + release) into one zip
        run: |
          mkdir -p work/android_release work/android_debug work/android_src
          unzip -q bin/android_source.release.zip -d work/android_release
          unzip -q bin/android_source.debug.zip -d work/android_debug

          cp -a work/android_release/. work/android_src/
          mkdir -p work/android_src/libs/debug work/android_src/libs/release

          cp -a work/android_debug/libs/debug/. work/android_src/libs/debug/
          
          ( cd work/android_src && zip -q -9 -r ../../bin/android_source.zip . )
      # TODO reenable
      #- name : Create iOS mono libs
      #  run: |
      #    mkdir -p bin/ios
      #    mkdir -p bin/ios/iphone-mono-libs
#
      #    lipo -create bin/libmonosgen-2.0.iphone.arm64.a bin/libmonosgen-2.0.iphone.x86_64.a -output bin/ios/iphone-mono-libs/libmonosgen-2.0.iphone.fat.a
      #    lipo -create bin/libmono-native.iphone.arm64.a bin/libmono-native.iphone.x86_64.a -output bin/ios/iphone-mono-libs/libmono-native.iphone.fat.a
      #    lipo -create bin/libmono-profiler-log.iphone.arm64.a bin/libmono-profiler-log.iphone.x86_64.a -output bin/ios/iphone-mono-libs/libmono-profiler-log.iphone.fat.a
#
      #    # The Mono libraries for the interpreter are not available for simulator builds
      #    lipo -create bin/libmono-ee-interp.iphone.arm64.a -output bin/ios/iphone-mono-libs/libmono-ee-interp.iphone.fat.a
      #    lipo -create bin/libmono-icall-table.iphone.arm64.a -output bin/ios/iphone-mono-libs/libmono-icall-table.iphone.fat.a
      #    lipo -create bin/libmono-ilgen.iphone.arm64.a -output bin/ios/iphone-mono-libs/libmono-ilgen.iphone.fat.a

      - name: Package per-platform editors and templates
        run: |
          set -e
          mkdir -p release release/templates release/templates_mono
          VERSION=${{ inputs.tag_release }}
          VERSION_CLEAN=${VERSION//-/.}

          # Rename editors for packaging
          mv bin/godot.linuxbsd.editor.x86_64 bin/Godot_v${VERSION}_linux.x86_64
          mv bin/godot.linuxbsd.editor.x86_64.mono bin/Godot_v${VERSION}_linux_mono.x86_64
          mv bin/godot.windows.editor.x86_64.exe bin/Godot_v${VERSION}_win64.exe
          mv bin/godot.windows.editor.x86_64.mono.exe bin/Godot_v${VERSION}_win64_mono.exe
          mv bin/godot.windows.editor.arm64.exe bin/Godot_v${VERSION}_windows_arm64.exe
          mv bin/godot.windows.editor.arm64.mono.exe bin/Godot_v${VERSION}_windows_arm64_mono.exe

          echo "Editors renamed to:"
          ls bin

          cd bin
          zip -q -9 -r ../release/Godot_v${VERSION}_linux.x86_64.zip Godot_v${VERSION}_linux.x86_64
          zip -q -9 -r ../release/Godot_v${VERSION}_linux_mono.x86_64.zip Godot_v${VERSION}_linux_mono.x86_64
          zip -q -9 -r ../release/Godot_v${VERSION}_win64.exe.zip Godot_v${VERSION}_win64.exe
          zip -q -9 -r ../release/Godot_v${VERSION}_win64_mono.exe.zip Godot_v${VERSION}_win64_mono.exe
          zip -q -9 -r ../release/Godot_v${VERSION}_windows_arm64.exe.zip Godot_v${VERSION}_windows_arm64.exe
          zip -q -9 -r ../release/Godot_v${VERSION}_windows_arm64_mono.exe.zip Godot_v${VERSION}_windows_arm64_mono.exe
          zip -q -9 -r ../release/Godot_v${VERSION}_macos.universal.zip Godot.app
          zip -q -9 -r ../release/Godot_v${VERSION}_macos.universal.mono.zip Godot_mono.app
          cd ..

          # Templates (non-mono)
          cp bin/godot.linuxbsd.template_debug.x86_64 "release/templates/linux_debug.x86_64"
          cp bin/godot.linuxbsd.template_release.x86_64 "release/templates/linux_release.x86_64"
          cp bin/godot.windows.template_debug.x86_64.exe "release/templates/windows_debug_x86_64.exe"
          cp bin/godot.windows.template_release.x86_64.exe "release/templates/windows_release_x86_64.exe"
          cp bin/godot.windows.template_debug.x86_32.exe "release/templates/windows_debug_x86_32.exe"
          cp bin/godot.windows.template_release.x86_32.exe "release/templates/windows_release_x86_32.exe"
          cp bin/godot.windows.template_debug.arm64.exe "release/templates/windows_debug_arm64.exe"
          cp bin/godot.windows.template_release.arm64.exe "release/templates/windows_release_arm64.exe"
          cp bin/godot.windows.template_debug.x86_64.console.exe "release/templates/windows_debug_x86_64_console.exe"
          cp bin/godot.windows.template_release.x86_64.console.exe "release/templates/windows_release_x86_64_console.exe"
          cp bin/godot.windows.template_debug.x86_32.console.exe "release/templates/windows_debug_x86_32_console.exe"
          cp bin/godot.windows.template_release.x86_32.console.exe "release/templates/windows_release_x86_32_console.exe"
          cp bin/godot.windows.template_debug.arm64.console.exe "release/templates/windows_debug_arm64_console.exe"
          cp bin/godot.windows.template_release.arm64.console.exe "release/templates/windows_release_arm64_console.exe"

          cp bin/macos.zip "release/templates/macos.zip"
          cp bin/godot_ios.zip "release/templates/ios.zip"
          cp -f bin/android_source.zip "release/templates/android_source.zip"
          cp -f bin/android_release.apk "release/templates/android_release.apk"
          cp -f bin/android_debug.apk "release/templates/android_debug.apk"

          cp bin/godot.web.template_release.wasm32.zip "release/templates/web_release.zip"
          cp bin/godot.web.template_debug.wasm32.zip "release/templates/web_debug.zip"
          cp bin/godot.web.template_release.wasm32.nothreads.zip "release/templates/web_nothreads_release.zip"
          cp bin/godot.web.template_debug.wasm32.nothreads.zip "release/templates/web_nothreads_debug.zip"
          cp bin/godot.web.template_release.wasm32.dlink.zip "release/templates/web_dlink_release.zip"
          cp bin/godot.web.template_debug.wasm32.dlink.zip "release/templates/web_dlink_debug.zip"
          cp bin/godot.web.template_release.wasm32.nothreads.dlink.zip "release/templates/web_dlink_nothreads_release.zip"
          cp bin/godot.web.template_debug.wasm32.nothreads.dlink.zip "release/templates/web_dlink_nothreads_debug.zip"

          # Templates (mono variants)
          cp bin/godot.linuxbsd.template_debug.x86_64.mono "release/templates_mono/linux_debug.x86_64"
          cp bin/godot.linuxbsd.template_release.x86_64.mono "release/templates_mono/linux_release.x86_64"
          cp bin/godot.windows.template_debug.x86_64.mono.exe "release/templates_mono/windows_debug_x86_64.exe"
          cp bin/godot.windows.template_release.x86_64.mono.exe "release/templates_mono/windows_release_x86_64.exe"
          cp bin/godot.windows.template_debug.x86_64.mono.console.exe "release/templates_mono/windows_debug_x86_64_console.exe"
          cp bin/godot.windows.template_release.x86_64.mono.console.exe "release/templates_mono/windows_release_x86_64_console.exe"

          cp bin/macos_mono.zip "release/templates_mono/macos.zip"
          # TODO re-enable when working
          #cp bin/godot_ios_mono.zip "release/templates_mono/ios.zip"
          cp -f bin/android_source.mono.zip "release/templates_mono/android_source.zip"
          cp -f bin/android_release_mono.apk "release/templates_mono/android_release.apk"
          cp -f bin/android_debug_mono.apk "release/templates_mono/android_debug.apk"

          rm -rf release/templates_mono/GodotSharp
          cp -R bin/GodotSharp release/templates_mono/GodotSharp

          printf "%s" "${VERSION_CLEAN}" > release/templates/version.txt
          printf "%s" "${VERSION_CLEAN}" > release/templates_mono/version.txt

          ls -R release/templates
          ls -R release/templates_mono

          cd release
          zip -q -r Godot_v${VERSION}_export_templates.tpz templates
          zip -q -r Godot_v${VERSION}_mono_export_templates.tpz templates_mono
      
      - name: List release directory
        run: ls -R release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}-${{ inputs.tag_release }}_${{ inputs.template_module_flags }}
          name: "Gonuts ${{ inputs.tag_release }} - ${{ inputs.template_module_flags }}"
          repository: ${{ inputs.repo }}
          token: ${{ secrets.GH_TOKEN }}
          body: |
            # Modules added:

            - [tiny_lobby](https://appsinacup.com/tiny-lobby/): Integrate with multiplayer C++ server with Lobby Management and Lua scripting.
            #- [Steam](https://godotsteam.com): Integrate your game with Steam.
            - [DiscordEmbeddedApp](https://discord.com/developers/docs/developer-tools/embedded-app-sdk): Integrate with Discord for your web game.
            #- [Terminal](https://github.com/markeel/gdterm): Run terminal commands from the Editor.
            #- [VSCode](https://github.com/appsinacup/godot_vscode_ide): Integrate with VSCode inside the editor.

            # Info:

            - Repo: [${{ inputs.repo }}](https://github.com/${{ inputs.repo }})
            - Base Version: ${{ inputs.tag_release }}
            - Optimization: ${{ inputs.lto }}
            - Template Module Flags: ${{ inputs.template_module_flags }}
            - Build Branch: ${{ inputs.base-branch }}
          files: |
            release/Godot_v${{ inputs.tag_release }}_linux.x86_64.zip
            release/Godot_v${{ inputs.tag_release }}_linux_mono.x86_64.zip
            release/Godot_v${{ inputs.tag_release }}_win64.exe.zip
            release/Godot_v${{ inputs.tag_release }}_win64_mono.exe.zip
            release/Godot_v${{ inputs.tag_release }}_windows_arm64.exe.zip
            release/Godot_v${{ inputs.tag_release }}_macos.universal.zip
            release/Godot_v${{ inputs.tag_release }}_macos.universal.mono.zip
            release/Godot_v${{ inputs.tag_release }}_export_templates.tpz
            release/Godot_v${{ inputs.tag_release }}_mono_export_templates.tpz
