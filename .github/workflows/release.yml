name: ðŸš€ Create Release
on:
  workflow_call:
    secrets:
      BUILD_CERTIFICATE_BASE64:
        description: Base64 encoded certificate for signing mac binary.
        required: false
      P12_PASSWORD:
        description: Password for the P12 certificate.
        required: false
      KEYCHAIN_PASSWORD:
        description: Password for the keychain.
        required: false
      APPLE_ID:
        description: Apple ID for notarization.
        required: false
      APP_SPECIFIC_PASSWORD:
        description: App-specific password for notarization.
        required: false
      APPLE_TEAM_ID:
        description: Apple Team ID for notarization.
        required: false
      ENCRYPTION_KEY:
        description: Encryption key for the build
        required: false
    inputs:
      base-branch:
        description: 'Base branch to use for the builds'
        required: false
        type: string
        default: '4.4'
      lto:
        description: 'LTO mode. Options: "none", "thin", "full"'
        required: false
        type: string
        default: "lto=thin"
      repo:
        description: 'Repository to use for the build'
        default: 'godotengine/godot'
        type: string
      tag:
        description: 'tag to use for the build'
        required: true
        type: string
        default: '4.4.1-stable'
      module_flags:
        description: 'Extra module flags, e.g. module_webm_enabled=no'
        required: false
        type: string
        default: ''
      template_module_flags:
        description: 'Extra module flags for template build, e.g. module_webm_enabled=no'
        required: false
        type: string
        default: ''

# Global Settings
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: ${{ inputs.base-branch }}
  SCONSFLAGS: verbose=yes warnings=extra werror=yes strict_checks=yes debug_symbols=no ${{ inputs.module_flags }}
  HAS_ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY != '' }}

jobs:
  release:
    env:
      BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    name: ðŸš€ Create Release
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.tag }}
          submodules: recursive

      - name: Export Encryption Key
        if: ${{ env.HAS_ENCRYPTION_KEY == 'true' }}
        run: echo "SCRIPT_AES256_ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v4
        with:
          path: bin
          merge-multiple: true

      - name: List downloaded bin
        run: ls -R bin
      
      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Select Xcode 16
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      - name: Checkout script repo for install_vulkan_sdk_macos.sh
        uses: actions/checkout@v4
        with:
          repository: appsinacup/action_godot_builder
          path: misc/scripts

      - name: Setup Vulkan SDK
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate
        if: ${{ env.BUILD_CERTIFICATE_BASE64 != '' }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          SIGNING_IDENTITY=$(security find-identity -v -p codesigning | awk -F'"' 'NR==1 {print $2}')
          echo "APPLE_SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV
  
      - name: Mac Create Editor Bundle
        if: ${{ env.BUILD_CERTIFICATE_BASE64 != '' }}
        run: |
          cp -r misc/dist/macos_tools.app ./bin/Godot.app
          mkdir -p bin/Godot.app/Contents/MacOS
          cp bin/godot.macos.editor.universal bin/Godot.app/Contents/MacOS/Godot
          chmod +x bin/Godot.app/Contents/MacOS/Godot
          codesign --force --timestamp --options=runtime --entitlements misc/dist/macos/editor.entitlements --sign "${{ env.APPLE_SIGNING_IDENTITY }}" bin/Godot.app

          # Package the application into a zip file
          zip -q -9 -r "Godot.universal.zip" bin/Godot.app

          /Applications/Xcode.app/Contents/Developer/usr/bin/notarytool store-credentials "AppleID" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APP_SPECIFIC_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}"

          /Applications/Xcode.app/Contents/Developer/usr/bin/notarytool submit Godot.universal.zip --wait --keychain-profile "AppleID"

          xcrun stapler staple bin/Godot.app

      - name: Mac Create Editor Bundle (w/o Signing)
        if: ${{ env.BUILD_CERTIFICATE_BASE64 == '' }}
        run: |
          cp -r misc/dist/macos_tools.app ./bin/Godot.app
          mkdir -p bin/Godot.app/Contents/MacOS
          cp bin/godot.macos.editor.universal bin/Godot.app/Contents/MacOS/Godot
          chmod +x bin/Godot.app/Contents/MacOS/Godot
          codesign --force --timestamp --options=runtime --entitlements misc/dist/macos/editor.entitlements -s - bin/Godot.app

      - name: Mac Create Template Bundle
        run: |
          cp -r misc/dist/macos_template.app ./bin
          mkdir -p bin/macos_template.app/Contents/MacOS
          cp bin/godot.macos.template_release.universal bin/macos_template.app/Contents/MacOS/godot_macos_release.universal
          cp bin/godot.macos.template_debug.universal bin/macos_template.app/Contents/MacOS/godot_macos_debug.universal
          chmod +x bin/macos_template.app/Contents/MacOS/godot_macos*
          cd bin && zip -q -9 -r macos.zip macos_template.app && cd ..

      - name: Package per-platform editors and templates
        run: |
          mkdir -p release/templates
          set -e
          VERSION=${{ inputs.tag }}
          VERSION_CLEAN=${VERSION//-/.}
          
          # Editors. Rename them
          mv bin/godot.linuxbsd.editor.x86_64 bin/Godot_v${VERSION}_linux.x86_64
          mv bin/godot.linuxbsd.editor.x86_32 bin/Godot_v${VERSION}_linux.x86_32
          mv bin/godot.windows.editor.x86_64.exe bin/Godot_v${VERSION}_win64.exe
          mv bin/godot.windows.editor.arm64.exe bin/Godot_v${VERSION}_windows_arm64.exe
          echo "Editors renamed to:"
          ls bin
          # Archive them
          cd bin
          zip -q -9 -r ../release/Godot_v${VERSION}_linux.x86_64.zip Godot_v${VERSION}_linux.x86_64
          zip -q -9 -r ../release/Godot_v${VERSION}_linux.x86_32.zip Godot_v${VERSION}_linux.x86_32
          zip -q -9 -r ../release/Godot_v${VERSION}_win64.exe.zip Godot_v${VERSION}_win64.exe
          zip -q -9 -r ../release/Godot_v${VERSION}_windows_arm64.exe.zip Godot_v${VERSION}_windows_arm64.exe
          zip -q -9 -r ../release/Godot_v${VERSION}_macos.universal.zip Godot.app
          cd ..
          # Templates
          cp bin/godot.linuxbsd.template_debug.x86_64 "release/templates/linux_debug.x86_64"
          cp bin/godot.linuxbsd.template_release.x86_64 "release/templates/linux_release.x86_64"
          cp bin/godot.linuxbsd.template_debug.x86_32 "release/templates/linux_debug.x86_32"
          cp bin/godot.linuxbsd.template_release.x86_32 "release/templates/linux_release.x86_32"

          cp bin/godot.windows.template_debug.x86_64.exe "release/templates/windows_debug_x86_64.exe"
          cp bin/godot.windows.template_release.x86_64.exe "release/templates/windows_release_x86_64.exe"
          cp bin/godot.windows.template_debug.x86_32.exe "release/templates/windows_debug_x86_32.exe"
          cp bin/godot.windows.template_release.x86_32.exe "release/templates/windows_release_x86_32.exe"
          cp bin/godot.windows.template_debug.arm64.exe "release/templates/windows_debug_arm64.exe"
          cp bin/godot.windows.template_release.arm64.exe "release/templates/windows_release_arm64.exe"

          cp bin/godot.windows.template_debug.x86_64.console.exe "release/templates/windows_debug_x86_64_console.exe"
          cp bin/godot.windows.template_release.x86_64.console.exe "release/templates/windows_release_x86_64_console.exe"
          cp bin/godot.windows.template_debug.x86_32.console.exe "release/templates/windows_debug_x86_32_console.exe"
          cp bin/godot.windows.template_release.x86_32.console.exe "release/templates/windows_release_x86_32_console.exe"
          cp bin/godot.windows.template_debug.arm64.console.exe "release/templates/windows_debug_arm64_console.exe"
          cp bin/godot.windows.template_release.arm64.console.exe "release/templates/windows_release_arm64_console.exe"

          cp bin/macos.zip "release/templates/macos.zip"
          cp bin/godot_ios.zip "release/templates/ios.zip"

          cp -f bin/android_source.zip "release/templates/"
          cp -f bin/android_release.apk "release/templates/"
          cp -f bin/android_debug.apk "release/templates/"

          cp bin/godot.web.template_release.wasm32.zip "release/templates/web_release.zip"
          cp bin/godot.web.template_debug.wasm32.zip "release/templates/web_debug.zip"
          cp bin/godot.web.template_release.wasm32.nothreads.zip "release/templates/web_nothreads_release.zip"
          cp bin/godot.web.template_debug.wasm32.nothreads.zip "release/templates/web_nothreads_debug.zip"
          cp bin/godot.web.template_release.wasm32.dlink.zip "release/templates/web_dlink_release.zip"
          cp bin/godot.web.template_debug.wasm32.dlink.zip "release/templates/web_dlink_debug.zip"
          cp bin/godot.web.template_release.wasm32.nothreads.dlink.zip "release/templates/web_dlink_nothreads_release.zip"
          cp bin/godot.web.template_debug.wasm32.nothreads.dlink.zip "release/templates/web_dlink_nothreads_debug.zip"

          echo "${VERSION_CLEAN}" > release/templates/version.txt

          # Create export templates .tpz
          ls -R release/templates
          cd release
          zip -r Godot_v${VERSION}_export_templates.tpz templates
      
      - name: List release directory
        run: ls -R release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Custom Godot ${{ inputs.tag }}"
          draft: true
          files: |
            release/Godot_v${{ inputs.tag }}_linux.x86_64.zip
            release/Godot_v${{ inputs.tag }}_linux.x86_32.zip
            release/Godot_v${{ inputs.tag }}_win64.exe.zip
            release/Godot_v${{ inputs.tag }}_windows_arm64.exe.zip
            release/Godot_v${{ inputs.tag }}_macos.universal.zip
            release/Godot_v${{ inputs.tag }}_export_templates.tpz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
